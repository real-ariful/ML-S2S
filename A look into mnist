import pandas as pd
import numpy as np

%matplotlib inline
import matplotlib.pyplot as plt

x = mnist.load_data('C:/Users/pc/Desktop/Test/mnist.npz')

(X_train, y_train) = x[0]
(X_test, y_test)=x[1]

X_train.shape
y_train.shape
X_test.shape
y_test.shape
y_test[0:10]

plt.imshow(X_train[0], cmap='gray')
y_train[0]
X_train[0].shape

X_train = X_train.reshape(-1,28*28)
X_test = X_test.reshape(-1,28*28)

X_train.shape

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /=255.0
X_test /=255.0

from keras.utils.np_utils import to_categorical
y_train_cat = to_categorical(y_train)
y_test_cat = to_categorical(y_test)

y_train_cat.shape
y_test_cat.shape


#Fully Connected on Image
from keras.models import Sequential
from keras.layers import Dense
import keras.backend as K

K.clear_session()

model = Sequential()
model.add(Dense(512, input_dim=28*28, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
              
hnew = model.fit(X_train, y_train_cat,
          batch_size=128,
          epochs=10,
          verbose=1,
          validation_data=(X_test, y_test_cat))
          
          
plt.plot(hnew.history['acc'])
plt.plot(hnew.history['val_acc'])
plt.legend(['Training','Validation'])
plt.title('Accuracy')
plt.xlabel('Epochs')
